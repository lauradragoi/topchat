#summary Details on TopChat Server
#labels TopChatServer

<table style="width:auto;"><tr><td><a href="http://picasaweb.google.com/lh/photo/3jyu5k2ePK23SkW7LEAuMQ?feat=embedwebsite"><img src="http://lh6.ggpht.com/_SWZTDK5kuus/Sl3eehBOP2I/AAAAAAAACdk/AA0sMUu6dkc/s144/topchatserver_logo.jpg" /></a></td><td width="10%"></td><td><h1>TopChat Server</h1></td></tr></table>

= Introduction =

  __*TopChat Server*__ is a software system consisting of a _Java server_ used for connecting clients and a _web application_ used for managing user accounts and exporting conversation logs.

----

= Details =

 * == Features ==

 The Java _server application_ is in charge of:
  * Accepting connections from clients
  * Authenticating connected clients based on username and password 
  * Hosting chat rooms and allowing clients to create/join these rooms
  * Sending messages to their recipients
  * Storing chat messages and events (join, part room) to a database for future analysis
  * Assigning numerical IDs to messages in a group conversation to be used by the client when defining semantic references between messages

 and the _web application_ is used for:
  * Creating new user accounts
  * Exporting conversation logs in order for these to be further analysed


 * == Technologies ==

 This section describes the protocols and technologies used in TopChat Server.
  * TopChat Server uses the __*[http://xmpp.org/ Extensible Messaging and Presence Protocol (XMPP)]*__, implementing features defined in [http://xmpp.org/rfcs/rfc3920.html RFC 3920], [http://xmpp.org/rfcs/rfc3921.html RFC 3921] and the [http://xmpp.org/extensions/xep-0045.html Multi-User Chat extension]. XMPP was chosen due to the fact that it is an open-standard, used in a large number of applications and well documented with support for extensions. I also considered the fact that using this standard protocol allows for interoperability with existing software. 
  * The __*[http://java.sun.com/javase/ Java Standard Edition Platform]*__ was chosen for the development of the server application based on the following considerations:
    * Rapid application development
    * Multithreading support
    * Asynchronous input/output support
    * Security mechanisms
    * Database integration support 
    * Portability
    * Easy delivery of the application
  * The __*Java Concurrency API*__ was necessary to implement multithreading in the application. The TopChat Server is supposed to accept new connection while handling communication with already connected clients and saving information in the database and updating the GUI. All these take place in a multithreaded environment to ensure rapid application response and efficiency. Also if running the server on a multi processor computer or a cluster, the application can better benefit from the available resources rather than if it were single threaded.
  * The __*Java New Input/Output (NIO) API*__ was used for its asynchronous input/output and I/O multiplexing capabilities and also because it can be integrated with Transport Layer Security implementation in SSLEngine since Java SE 1.5.
  * For securing the communication between the server and the clients the following __*[http://java.sun.com/javase/technologies/security/ Java Security]*__ mechanisms were used: 
      * __*[http://java.sun.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html Java Secure Socket Extension (JSSE)]*__ for implementing the Transport Layer Protocol required by XMPP while using non-blocking input/output.
      * __*[http://java.sun.com/javase/6/docs/technotes/guides/security/sasl/sasl-refguide.html The Java SASL API]*__ used for including Simple Authentication and Security Layer as required by the XMPP specification.
  * For parsing and creating XML elements used for communicating between the clients and the server as the XMPP protocol specifies, the __*Java Streaming API for XML (StAX)*__ is used. This is a pull-parsing API, offering the application the entire control of the flow of XML tokens to be parsed and efficiently using CPU and memory. It is also quite easy to use.
  * The server application communicates with databases for obtaining authentication information and for saving conversations. The connection is made possible through the __*[http://java.sun.com/products/jdbc/overview.html Java Database Connectivity API]*__. The JDBC driver that was used is __*MySQL Connector/J*__.



<table style="width:auto;"><tr><td><a href="http://picasaweb.google.com/lh/photo/OD_3YxQRmCS9CZ3LqfjIug?feat=embedwebsite"><img src="http://lh6.ggpht.com/_SWZTDK5kuus/SmBqfxmCh6I/AAAAAAAACeA/ivvOZDOKqsY/s400/topchatserver_tech.jpg" /></a></td></tr><tr align="center"><td style="font-family:arial,sans-serif; font-size:11px; text-align:center">Technologies used in TopChat Server</td></tr></table>


 * == Architecture ==

<table style="width:auto;"><tr><td><a href="http://picasaweb.google.com/lh/photo/ORZjrzx8rs-0veYipQY4Iw?feat=embedwebsite"><img src="http://lh3.ggpht.com/_SWZTDK5kuus/SmBzkRwptZI/AAAAAAAACec/7UumbLR6res/s400/topchatserver_arch.jpeg" /></a></td></tr><tr align="center"><td style="font-family:arial,sans-serif; font-size:11px; text-align:center">Architecture of TopChat Server</td></tr></table>

----

= Releases =

 * [http://topchat.googlecode.com/files/1.0.1.zip TopChatServer 1.0.1]
 * [http://topchat.googlecode.com/files/TopChatServer_v1.0.0.zip TopChatServer 1.0.0]